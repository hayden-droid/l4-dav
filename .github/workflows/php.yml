name: PHP CI

on: [push, pull_request]

jobs:
  install_tools:

    runs-on: ubuntu-18.04

    name: Install tools

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Install tools
        uses: ngmy/phive-install-action@master
        with:
          phive-arguments: --force-accept-unsigned

      - name: Upload tools to artifact store
        uses: actions/upload-artifact@master
        with:
          name: tools
          path: tools

  test:

    needs: install_tools

    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        php: ['7.3', '7.4', '8.0']
        deps: [highest, lowest]
        include:
          - php: '7.4'
            deps: current

    name: Test (PHP ${{ matrix.php }}, ${{ matrix.deps }} dependencies)

    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up PHP ${{ matrix.php }}
        run: sudo update-alternatives --set php /usr/bin/php${{ matrix.php }}

      - name: Update Composer to latest version
        run: sudo composer self-update

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache Composer packages
        if: matrix.deps == 'current'
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.deps }}" == 'current' && "${{ steps.composer-cache.outputs.cache-hit }}" != 'true' ]]; then
            composer install --no-interaction
          fi
          if [[ "${{ matrix.deps }}" == 'highest' ]]; then
            composer update --no-interaction
          fi
          if [[ "${{ matrix.deps }}" == 'lowest' ]]; then
            composer update --no-interaction --prefer-lowest --prefer-stable
          fi

      - name: Download tools from artifact store
        uses: actions/download-artifact@master
        with:
          name: tools
          path: tools

      - run: |
          git submodule update --init

      - run: |
          cp -f ../.laradock/env-development .env
          docker-compose up -d apache2
          docker-compose exec apache2 mkdir -p .laradock/data/apache2/var \
            .laradock/data/apache2/webdav_no_auth \
            .laradock/data/apache2/webdav_basic_auth \
            .laradock/data/apache2/webdav_digest_auth
          docker-compose exec apache2 chown -R www-data:www-data .laradock/data/apache2
          docker-compose exec apache2 htpasswd -b -c /etc/apache2/.htpasswd basic basic
          docker-compose exec apache2 bash -c '(echo -n "digest:Digest Auth:" && echo -n "digest:Digest Auth:digest" | md5sum - | cut -d"-" -f1 | sed "s/ *$//") > /etc/apache2/.htdigest'
        working-directory: laradock

      - name: Set tools as an executable
        run: find tools -type f -print0 | xargs -0 chmod +x

      - name: Run lint
        env:
          PSALM_SHEPHERD: 1
          # TODO: Remove it when psalm no longer tries to create a cache directory
          #       https://github.com/vimeo/psalm/issues/4267
          XDG_CACHE_HOME: /tmp
        run: composer lint

      - name: Run unit tests
        env:
          XDEBUG_MODE: coverage
        run: composer test -- --testsuite Unit

      - name: Upload coverage results to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: php tools/php-coveralls --coverage_clover=build/logs/clover.xml -v
